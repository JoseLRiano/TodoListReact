{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","handleRemove","removeTodo","id","toggleForm","setState","isEditing","state","handleUpdate","event","preventDefault","updateTodo","task","handleChange","target","name","value","handleToggle","bind","e","this","toggleTodo","className","onSubmit","type","onChange","completed","onClick","Component","NewTodoForm","handleSubmit","createTodo","uuid","htmlFor","placeholder","TodoList","newTodo","todos","filter","t","updatedTask","updatedTodos","map","todo","toggleCompletion","todoList","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.90dcad97.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Todo.css';\n\nclass Todo extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            isEditing: false, \n            task: this.props.task\n        };\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n    handleRemove = () => {\n        this.props.removeTodo(this.props.id);\n    }\n\n    toggleForm = () => {\n        this.setState({ isEditing: !this.state.isEditing })\n    }\n\n    handleUpdate = (event) => {\n        event.preventDefault();\n        this.props.updateTodo(this.props.id, this.state.task);\n        this.setState({  isEditing: false })\n        // Take new task data up to the parent\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    handleToggle(e) {\n        this.props.toggleTodo(this.props.id);\n    }\n\n    render(){\n        let result;\n        if(this.state.isEditing){\n            result = (\n                <div className=\"Todo\">\n                    <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n                        <input \n                            type=\"text\" \n                            value={this.state.task}\n                            name=\"task\"\n                            onChange={this.handleChange}\n                        />\n                        <button>Save</button>\n                    </form>\n                </div>\n            );\n        } else {\n            result = (\n                <div className=\"Todo\">\n                    <li className={this.props.completed ? \"Todo-task completed\" : \"todo-task\" } onClick={this.handleToggle}>{this.props.task}</li>\n                    <div className=\"Todo-buttons\">\n                        <button onClick={this.toggleForm}><i className=\"fas fa-pen\" /></button>\n                        <button onClick={this.handleRemove}><i className=\"fas fa-trash\" /></button>\n                    </div>\n                </div>\n            );\n        }\n        return result;\n    }\n}\nexport default Todo;","import React, { Component } from 'react';\nimport uuid from 'uuid/dist/v4';\nimport './NewTodoForm.css'\n\nclass NewTodoForm extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            task: \"\"\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        \n        this.props.createTodo({...this.state, id: uuid(), completed: false});\n        this.setState({ task: \"\"})\n    }\n\n    render(){\n        return(\n                <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\n                    <label htmlFor=\"task\">New Todo: </label>\n                    <input \n                        type=\"text\"\n                        name=\"task\"\n                        id=\"task\"\n                        placeholder=\"Add ToDo\"\n                        value={this.state.task}\n                        onChange={this.handleChange}\n                    />\n                    <button>Add Todo!</button>\n                </form>\n            \n        );\n        \n    }\n}\n\nexport default NewTodoForm;","import React, { Component } from 'react';\nimport Todo from './Todo';\nimport NewTodoForm from './NewTodoForm';\nimport './TodoList.css';\n\nclass TodoList extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            todos: [ ]\n        };\n        this.toggleCompletion = this.toggleCompletion.bind(this);\n    }\n\n    createTodo = (newTodo) => {\n        this.setState({\n            todos: [...this.state.todos, newTodo]\n        })\n    }\n\n    removeTodo = (id) => {\n        this.setState({\n            todos: this.state.todos.filter( t => t.id !== id)\n        })\n    }\n\n    updateTodo = (id, updatedTask) => {\n        const updatedTodos = this.state.todos.map(todo => {\n            if(todo.id === id) {\n                return {...todo, task: updatedTask };\n            }\n            return todo;\n        });\n        this.setState({ todos: updatedTodos });\n    }\n\n    toggleCompletion(id) {\n        const updatedTodos = this.state.todos.map(todo => {\n            if(todo.id === id) {\n                return {...todo, completed: !todo.completed };\n            }\n            return todo;\n        });\n        this.setState({ todos: updatedTodos });\n    }\n   \n    render(){\n        const todoList = this.state.todos.map(todo => {\n            return <Todo \n                        key={todo.id} \n                        id={todo.id} \n                        task={todo.task} \n                        completed={todo.completed}\n                        removeTodo={this.removeTodo}\n                        updateTodo={this.updateTodo}\n                        toggleTodo={this.toggleCompletion}\n                    />\n        });\n        return (\n            <div className=\"TodoList\">\n                <h1>Todo List <span>Simple React App.</span></h1>\n               \n                <ul>\n                    {todoList}\n                </ul>\n                \n                <NewTodoForm createTodo={this.createTodo} />\n            </div>\n        );\n    }\n}\n\nexport default TodoList;","import React from 'react';\nimport TodoList from './TodoList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div >\n        <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}